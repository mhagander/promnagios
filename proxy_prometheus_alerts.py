#!/usr/bin/env python3
#
# Proxy alerts generated by Prometheus Alertmanager turning them into
# nagios passive alert information.
#
# Copyright 2019-2020, PostgreSQL Infrastructure Team
# Author: Magnus Hagander
#


import argparse
import http.server
import json
import time
import sys

missed_alerts = 0


def send_nagios_alert(status, alertname, hostname, info, severity):
    global args

    if status == 'firing':
        if severity == 'CRITICAL':
            alertlevel = 2
        elif severity == 'WARNING':
            alertlevel = 1
        else:
            # Actively specified to something that's not warning or critical,
            # so we're just going to map it to critical.
            alertlevel = 2
    elif status == 'resolved':
        alertlevel = 0
        info = ""
    else:
        raise Exception("Unknown alert status {0}".format(status))

    if args.hostsuffix:
        hostname = "{0}.{1}".format(hostname, args.hostsuffix)

    out = "[{0}] PROCESS_SERVICE_CHECK_RESULT;{1};{2};{3};{4}\n".format(
        int(time.time()),
        hostname,
        alertname,
        alertlevel,
        info
    )
    with open(args.nagioscmd, 'w') as f:
        f.write(out)


class NotificationHandler(http.server.BaseHTTPRequestHandler):
    def do_GET(self):
        if self.path == '/ping':
            global missed_alerts
            if missed_alerts:
                self.send_and_end(500,
                                  'Missed {0} alerts!'.format(
                                      missed_alerts).encode('utf8'))
                return

            self.send_response(200)
            self.send_header('Content-type', 'text/plain')
            self.end_headers()
            self.wfile.write(b'OK')
            return
        self.send_and_end(404, 'Not found')

    def do_POST(self):
        if self.path == '/alert':
            if self.headers['Content-Type'] != 'application/json':
                self.send_and_end(415, b'Must be json')
                return
            j = json.loads(self.rfile.read(
                int(self.headers['Content-Length'])
            ).decode('utf8'))
            try:
                for a in j['alerts']:
                    status = a['status']
                    alertname = a['labels']['alertname']
                    hostname = a['labels']['name']
                    info = a['annotations']['summary']
                    severity = a['labels'].get('severity', 'CRITICAL').upper()

                    send_nagios_alert(status, alertname, hostname, info, severity)
            except Exception as e:
                print("MISSED ALERT: %s" % e)
                global missed_alerts
                missed_alerts += 1
            self.send_and_end(200, b"OK")

    def send_and_end(self, code, msg):
        self.send_response(code)
        self.end_headers()
        self.wfile.write(msg)


if __name__ == "__main__":
    global args

    parser = argparse.ArgumentParser(
        description="Create nagios alerts from prometheus monitors"
    )
    parser.add_argument('--hostsuffix', help='Suffix to add to hostnamees')
    parser.add_argument('--port', help='TCP port to bind to')
    parser.add_argument('--nagioscmd', help='Path to nagios command file')
    args = parser.parse_args()

    if not args.port:
        print("Port must be specified")
        sys.exit(1)
    if not args.nagioscmd:
        print("Nagios command path must be specified")
        sys.exit(1)

    server_address = ('localhost', int(args.port))
    httpd = http.server.HTTPServer(server_address, NotificationHandler)
    httpd.serve_forever()
